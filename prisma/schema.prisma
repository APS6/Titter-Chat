generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
}

model User {
  id         String          @id
  username   String          @unique
  email      String          @unique
  bio        String?
  pfpURL     String
  posts      Post[]          @relation("UserPosts")
  likes      Like[]
  followedBy Follows[]       @relation("following")
  following  Follows[]       @relation("follower")
  sentDM     DirectMessage[] @relation("sentby")
  receivedDM DirectMessage[] @relation("sentto")
  role       Role            @default(USER)
}

model Post {
  id         String   @id @unique @default(uuid())
  content    String   @db.Text
  images     Image[]
  postedAt   DateTime @default(now())
  postedBy   User?    @relation("UserPosts", fields: [postedById], references: [id], onDelete: SetNull)
  postedById String?
  likes      Like[]
  edited     Boolean  @default(false)
  replies    Reply[]  @relation("replies")
  reply      Reply?   @relation("replyPost")
  
  @@index([postedById])
}

model Reply {
  replyToPost Post?   @relation("replies", fields: [replyToId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  replyToId   String?
  replyPost   Post    @relation("replyPost", fields: [replyPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replyPostId String  @unique

  @@index([replyToId])
}

model Image {
  id       String @id @unique @default(uuid())
  imageUrl String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  width    Int?
  height   Int?

  @@index([postId])
}

model Like {
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String
  likedAt DateTime @default(now())

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model DirectMessage {
  id        String          @id @unique @default(uuid())
  content   String          @db.Text
  sentAt    DateTime        @default(now())
  sentBy    User            @relation("sentby", fields: [sentById], references: [id])
  sentById  String
  sentTo    User            @relation("sentto", fields: [sentToId], references: [id])
  sentToId  String
  images    DMImage[]
  edited    Boolean         @default(false)
  replies    DMReply[]  @relation("replies")
  reply      DMReply?   @relation("replyMessage")

  @@index([sentById])
  @@index([sentToId])
  @@index([sentById, sentToId])
}

model DMReply {
  replyToMessage DirectMessage?   @relation("replies", fields: [replyToId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  replyToId   String?
  replyMessage   DirectMessage    @relation("replyMessage", fields: [replyMessageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replyMessageId String  @unique

  @@index([replyToId])
}


model DMImage {
  id        String        @id @unique @default(uuid())
  imageUrl  String
  message   DirectMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  @@index([messageId])
}
